/* CTF 1.8 */

typealias integer { size = 5; align = 1; signed = false; } := uint5_t;
typealias integer { size = 8; align = 8; signed = false; } := uint8_t;
typealias integer { size = 16; align = 8; signed = false; } := uint16_t;
typealias integer { size = 32; align = 8; signed = false; } := uint32_t;
typealias integer { size = 64; align = 8; signed = false; } := uint64_t;
typealias integer { size = 64; align = 8; signed = false; } := unsigned long;

trace {
    major = 1;
    minor = 8;
    uuid = "6a7715d0-b502-4c65-8678-6777ac7f755a";
    byte_order = le;
    packet.header := struct {
        uint32_t magic;
        uint8_t  uuid[16];
        uint32_t stream_id;
        uint64_t stream_instance_id;
    };
};

env {
	hostname = "Record_Item";
	domain = "kernel";
	sysname = "Linux";
	kernel_release = "4.18.14-arch1-1-ARCH";
	kernel_version = "#1 SMP PREEMPT Sat Thu 17 13:42:37 UTC 2019";
	tracer_name = "lttng-modules";
	tracer_major = 2;
	tracer_minor = 11;
	tracer_patchlevel = 0;
};

clock {
    name = "monotonic";
    uuid = "234d669d-7651-4bc1-a7fd-af581ecc6232";
    description = "Monotonic Clock";
    freq = 1000000000; /* Frequency, in Hz */
    /* clock value offset from Epoch is: offset * (1/freq) */
    offset = 1539783991179109789;
};

typealias integer {
	size = 27; align = 1; signed = false;
	map = clock.monotonic.value;
} := uint27_clock_monotonic_t;

typealias integer {
	size = 32; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint32_clock_monotonic_t;

typealias integer {
	size = 64; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint64_clock_monotonic_t;

struct packet_context {
	uint64_clock_monotonic_t timestamp_begin;
	uint64_clock_monotonic_t timestamp_end;
    uint64_t content_size;
	uint64_t packet_size;
    uint64_t packet_seq_num;
	unsigned long events_discarded;
	uint32_t cpu_id;
};

struct event_header_compact {
	enum : uint5_t { compact = 0 ... 30, extended = 31 } id;
	variant <id> {
		struct {
			uint27_clock_monotonic_t timestamp;
		} compact;
		struct {
			uint32_t id;
			uint64_clock_monotonic_t timestamp;
		} extended;
	} v;
} align(8);

struct event_header_large {
	enum : uint16_t { compact = 0 ... 65534, extended = 65535 } id;
	variant <id> {
		struct {
			uint32_clock_monotonic_t timestamp;
		} compact;
		struct {
			uint32_t id;
			uint64_clock_monotonic_t timestamp;
		} extended;
	} v;
} align(8);

stream {
    id = 0;
    event.header := struct event_header_compact;
    packet.context := struct packet_context;
};

struct switch_fields {
    integer { size = 8; align = 8; signed = 0; encoding = UTF8; base = 10;} _prev_comm[16];
    integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _prev_tid;
    integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _prev_prio;
    integer { size = 64; align = 8; signed = 1; encoding = none; base = 10; } _prev_state;
    integer { size = 8; align = 8; signed = 0; encoding = UTF8; base = 10; } _next_comm[16];
    integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _next_tid;
    integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _next_prio;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 31;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 30;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 29;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 28;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 27;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 26;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 25;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 24;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 23;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 22;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 21;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 20;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 19;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 18;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 17;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 16;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 15;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 14;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 13;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 12;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 11;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 10;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 9;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 8;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 7;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 6;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 5;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 4;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 3;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 2;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 1;
    fields := struct switch_fields;
};

event {
    name = "sched_switch";
    stream_id = 0;
    id = 0;
    fields := struct switch_fields;
};
